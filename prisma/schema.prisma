// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  ARTIST
  VIEWER
}

enum DiscountType {
  PERCENTAGE
  VALUE
}

model User {
  id       String @id @default(uuid())
  name     String
  username String @unique
  email    String @unique
  password String
  role     Role   @default(VIEWER)

  events        Event[]
  notifications Notification[]
  cart          Cart?

  addresses Address[]
  orders    Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Event {
  id            String  @id @default(uuid())
  title         String
  slug          String  @unique
  content       String
  price         Float
  statusPayment Boolean @map("status_payment")
  eventDate     String  @map("event_date")
  eventTime     String  @map("event_time")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @default(now()) @map("updated_at")

  authorId String @map("author_id")

  author      User         @relation(fields: [authorId], references: [id])
  attachments Attachment[]

  @@map("events")
}

model Attachment {
  id    String @id @default(uuid())
  title String
  url   String

  eventId String? @map("event_id")

  event Event? @relation(fields: [eventId], references: [id])

  @@map("attachments")
}

model Notification {
  id          String @id @default(uuid())
  recipientId String @map("recipient_id")
  title       String
  content     String

  readAt    DateTime? @map("read_at")
  createdAt DateTime  @default(now()) @map("created_at")

  recipient User @relation(fields: [recipientId], references: [id])

  @@map("notifications")
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  imgUrl      String[]

  categories    Category[]
  orderProducts OrderProduct[]
  cartProducts  CartProducts[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

model Order {
  id           String    @id @default(uuid())
  orderNumber  Int       @default(autoincrement())
  status       String
  paymentDate  DateTime?
  partialValue Float
  discount     Float?
  totalValue   Float
  deliveryFee  Float
  deliveryDate DateTime
  // deliveryShift deliveryShift

  orderProducts OrderProduct[]

  userId    String?
  couponId  String? @unique
  addressId String?

  coupon Coupon? @relation(fields: [couponId], references: [id])

  User    User?    @relation(fields: [userId], references: [id])
  address Address? @relation(fields: [addressId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

model OrderProduct {
  id String @id @default(uuid())

  quantity   Int
  unitPrice  Float
  totalValue Float

  comment String?

  order     Order?   @relation(fields: [orderId], references: [id])
  orderId   String?
  product   Product? @relation(fields: [productId], references: [id])
  productId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id String @id

  name String

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orderProducts")
}

model Address {
  id String @id

  addressLine    String
  buildingNumber String
  complement     String?
  referencePoint String?
  neighborhood   String
  city           String
  state          String
  zipCode        String
  country        String

  description String?
  isEnabled   Boolean? @default(false)

  orders Order[]

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("addresses")
}

model Cart {
  id String @id

  cartProducts CartProducts[]

  user   User?  @relation(fields: [userId], references: [id])
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("carts")
}

model CartProducts {
  id String @id

  quantity Int

  product   Product? @relation(fields: [productId], references: [id])
  productId String?
  cart      Cart?    @relation(fields: [cartId], references: [id])
  cartId    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cartProducts")
}

model DeliveryFee {
  id String @id

  neighborhood String
  fee          Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Coupon {
  id String @id

  code     String
  type     DiscountType
  discount Float

  expiresIn DateTime
  wasUsed   Boolean  @default(false)
  isEnabled Boolean  @default(true)

  orderId String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order?

  @@map("coupons")
}
